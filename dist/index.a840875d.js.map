{"mappings":"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","sources":["Desktop/resize app/index.js"],"sourcesContent":["// hiding the div that will contain the images\n\nconst fileInput = document.querySelector(\"#upload\");\nconst colorPicker = document.querySelector(\"#color-picker\");\nconst widthInput = document.querySelector(\"#width-input\");\nconst heightInput = document.querySelector(\"#height-input\");\nconst exportButton = document.querySelector(\"#export-button\");\nconst canvas = document.querySelector(\"#canvas\");\nconst context = canvas.getContext(\"2d\");\n\nlet imgToResize = null;\n\ncanvasWidth = 700;\ncanvasHeight = 300;\n\nbackgroundColor = 'black';\n\nscale = 1.00;\nxOffset = 0;\nyOffset = 0;\n\n// drag related vars\nvar isDragging=false;\nvar mouseStartX,mouseStartY;\n\nvar isImageLoaded = false;\n\nvar canvasOffsetX,canvasOffsetY;\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    calcOffsetOfCanvas();\n    window.onscroll=function(e){ calcOffsetOfCanvas(); }\n    window.onresize=function(e){ calcOffsetOfCanvas(); }\n    canvas.onresize=function(e){ calcOffsetOfCanvas(); }\n        \n    renderCanvas();\n    canvas.onmousedown=handleMouseDown;\n    canvas.onmousemove=handleMouseMove;\n    canvas.onmouseup=handleMouseUp;\n    canvas.onmouseout=handleMouseOut;\n    canvas.onmousewheel=handleScroll;\n});\n\ncolorPicker.addEventListener(\"change\", async (e) => {\n    backgroundColor = e.target.value;\n    renderCanvas();\n});\n\nheightInput.addEventListener(\"change\", async (e) => {\n    canvasHeight = e.target.value;\n    renderCanvas();\n});\n\nwidthInput.addEventListener(\"change\", async (e) => {\n    canvasWidth = e.target.value;\n    renderCanvas();\n});\n\nfunction calcOffsetOfCanvas(){\n    var canvasBounds = canvas.getBoundingClientRect();\n    canvasOffsetX = canvasBounds.left;\n    canvasOffsetY = canvasBounds.top;        \n}\n\nfunction downloadImage() {\n    console.log('download image')\n  let canvasImage = canvas.toDataURL('image/jpeg');\n    \n    // this can be used to download any image from webpage to local disk\n    let xhr = new XMLHttpRequest();\n    xhr.responseType = 'blob';\n    xhr.onload = function () {\n        let a = document.createElement('a');\n        a.href = window.URL.createObjectURL(xhr.response);\n        a.download = 'ImageResizerDownload.jpg';\n        a.style.display = 'none';\n        document.body.appendChild(a);\n        a.click();\n        a.remove();\n      };\n      xhr.open('GET', canvasImage); // This is to download the canvas Image\n      xhr.send();\n}\n\nfileInput.addEventListener(\"change\", async (e) => {\n    const [file] = fileInput.files;\n    imgToResize = document.querySelector(\"#imgToResize\");\n    imgToResize.src = await fileToDataUri(file);\n\n    imgToResize.addEventListener(\"load\", () => {\n        renderCanvas();\n    });\n\n    return false;\n});\n\nfunction fileToDataUri(field) {\n    return new Promise((resolve) => {\n        const reader = new FileReader();\n\n        reader.addEventListener(\"load\", () => {\n            resolve(reader.result);\n        });\n\n        reader.readAsDataURL(field);\n    });\n}\n\nfunction renderCanvas() {\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n\n    context.fillStyle = backgroundColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n\n    if (imgToResize) {\n\n\n        //bg blur\n\n        let blurImage = new Image();\n        blurImage.src = imgToResize.src;\n        blurImage.style.filter = 'blur(50px)';\n\n\n        context.drawImage(\n            blurImage,\n            0,\n            0,\n            canvas.width, //originalWidth * resizingFactor,\n            canvas.height//originalHeight * resizingFactor\n        );\n\n\n        // const originalWidth = imgToResize.width;\n        // const originalHeight = imgToResize.height;\n    \n        // const aspectRatio = originalWidth / originalHeight;\n        // const width = canvasWidth;\n        // const height = width / aspectRatio;\n\n        // context.drawImage(\n        //     imgToResize,\n        //     xOffset,\n        //     yOffset,\n        //     width * scale, //originalWidth * resizingFactor,\n        //     height * scale//originalHeight * resizingFactor\n        // );\n    }\n}\n\n\nfunction handleMouseDown(e){\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // calculate the current mouse position\n    mouseStartX=parseInt(e.clientX-canvasOffsetX);\n    mouseStartY=parseInt(e.clientY-canvasOffsetY);\n    // test mouse position against all shapes\n    // post result if mouse is in a shape\n    isDragging=true;\n}\n\nfunction handleMouseUp(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // the drag is over -- clear the isDragging flag\n    isDragging=false;\n}\n\nfunction handleMouseOut(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // the drag is over -- clear the isDragging flag\n    isDragging=false;\n}\n\nfunction handleMouseMove(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // calculate the current mouse position         \n    let mouseX=parseInt(e.clientX-canvasOffsetX);\n    let mouseY=parseInt(e.clientY-canvasOffsetY);\n    // how far has the mouse dragged from its previous mousemove position?\n    var dx=mouseX-mouseStartX;\n    var dy=mouseY-mouseStartY;\n    // move the selected shape by the drag distance\n    xOffset += dx;\n    yOffset += dy;\n    // clear the canvas and redraw all shapes\n    renderCanvas();\n    // update the starting drag position (== the current mouse position)\n    mouseStartX=mouseX;\n    mouseStartY=mouseY;\n}\n\nfunction handleScroll(e){\n    e.preventDefault();\n    e.stopPropagation();\n\n    if(e.deltaY > 0){\n        scale += 0.01;\n    } else {\n        scale -= 0.01;\n    }\n    renderCanvas();\n}\n\ndocument.addEventListener(\"keydown\", function (e) {\n    switch (e.key) {\n        case \"ArrowLeft\":\n            xOffset -= 3;\n            break;\n        case \"ArrowRight\":\n            xOffset += 3;\n            break;\n        case \"ArrowUp\":\n            yOffset -= 3;\n            break;\n        case \"ArrowDown\":\n            yOffset += 3;\n            break;\n        case \"=\":\n            scale += 0.01;\n            break;\n        case \"-\":\n            scale -= 0.01;\n            break;\n    }\n    renderCanvas();\n})\n\n"],"names":["fileInput","document","querySelector","colorPicker","widthInput","heightInput","exportButton","canvas","context","getContext","imgToResize","canvasWidth","canvasHeight","backgroundColor","scale","xOffset","yOffset","mouseStartX","mouseStartY","canvasOffsetX","canvasOffsetY","isDragging","isImageLoaded","calcOffsetOfCanvas","canvasBounds","getBoundingClientRect","left","top","downloadImage","console","log","canvasImage","toDataURL","xhr","XMLHttpRequest","responseType","onload","a","createElement","href","window","URL","createObjectURL","response","download","style","display","body","appendChild","click","remove","open","send","fileToDataUri","field","Promise","resolve","reader","FileReader","addEventListener","result","readAsDataURL","renderCanvas","width","height","fillStyle","fillRect","blurImage","Image","src","filter","drawImage","handleMouseDown","e","preventDefault","stopPropagation","parseInt","clientX","clientY","handleMouseUp","handleMouseOut","handleMouseMove","mouseX","mouseY","handleScroll","deltaY","onscroll","onresize","onmousedown","onmousemove","onmouseup","onmouseout","onmousewheel","async","target","value","file","files","key"],"version":3,"file":"index.a840875d.js.map"}