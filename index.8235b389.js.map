{"mappings":"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","sources":["<anon>","index.js"],"sourcesContent":["const fileInput = document.querySelector(\"#upload\");\nconst colorPicker = document.querySelector(\"#color-picker\");\nconst widthInput = document.querySelector(\"#width-input\");\nconst heightInput = document.querySelector(\"#height-input\");\nconst bgImagePicker = document.querySelector(\"#imagebg-picker\");\nconst exportButton = document.querySelector(\"#export-button\");\nconst canvas = document.querySelector(\"#canvas\");\nconst context = canvas.getContext(\"2d\");\nlet imgToResize = null;\nlet canvasWidth = 896;\nlet canvasHeight = 506;\nlet backgroundColor = \"black\";\nlet scale = 1.00;\nlet xOffset = 0;\nlet yOffset = 0;\nlet isDragging = false;\nlet mouseStartX, mouseStartY;\nlet canvasOffsetX, canvasOffsetY;\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    calcOffsetOfCanvas();\n    window.onscroll = function(e) {\n        calcOffsetOfCanvas();\n    };\n    window.onresize = function(e) {\n        calcOffsetOfCanvas();\n    };\n    canvas.onresize = function(e) {\n        calcOffsetOfCanvas();\n    };\n    renderCanvas();\n    canvas.onmousedown = handleMouseDown;\n    canvas.onmousemove = handleMouseMove;\n    canvas.onmouseup = handleMouseUp;\n    canvas.onmouseout = handleMouseOut;\n    canvas.onmousewheel = handleScroll;\n});\ncolorPicker.addEventListener(\"change\", async (e)=>{\n    backgroundColor = e.target.value;\n    renderCanvas();\n});\nbgImagePicker.addEventListener(\"change\", async (e)=>{\n    renderCanvas();\n});\nheightInput.addEventListener(\"change\", async (e)=>{\n    canvasHeight = e.target.value;\n    renderCanvas();\n});\nwidthInput.addEventListener(\"change\", async (e)=>{\n    canvasWidth = e.target.value;\n    renderCanvas();\n});\nfunction calcOffsetOfCanvas() {\n    const canvasBounds = canvas.getBoundingClientRect();\n    canvasOffsetX = canvasBounds.left;\n    canvasOffsetY = canvasBounds.top;\n}\nfunction downloadImage() {\n    console.log(\"download image\");\n    let canvasImage = canvas.toDataURL(\"image/jpeg\");\n    let xhr = new XMLHttpRequest();\n    xhr.responseType = \"blob\";\n    xhr.onload = function() {\n        let a = document.createElement(\"a\");\n        a.href = window.URL.createObjectURL(xhr.response);\n        a.download = \"ImageResizerDownload.jpg\";\n        a.style.display = \"none\";\n        document.body.appendChild(a);\n        a.click();\n        a.remove();\n    };\n    xhr.open(\"GET\", canvasImage);\n    xhr.send();\n}\nfileInput.addEventListener(\"change\", async (e)=>{\n    const [file] = fileInput.files;\n    imgToResize = document.querySelector(\"#imgToResize\");\n    imgToResize.src = await fileToDataUri(file);\n    imgToResize.addEventListener(\"load\", ()=>{\n        renderCanvas();\n    });\n    return false;\n});\nfunction fileToDataUri(field) {\n    return new Promise((resolve)=>{\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", ()=>{\n            resolve(reader.result);\n        });\n        reader.readAsDataURL(field);\n    });\n}\nfunction renderCanvas() {\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    context.fillStyle = backgroundColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    if (imgToResize) {\n        if (bgImagePicker.checked) {\n            //apply bg blur\n            let blurImage = new Image();\n            blurImage.src = imgToResize.src;\n            context.filter = \"blur(50px)\";\n            context.drawImage(blurImage, -80, -80, canvas.width + 160, canvas.height + 160);\n        }\n        context.filter = \"blur(0px)\";\n        const originalWidth = imgToResize.width;\n        const originalHeight = imgToResize.height;\n        const aspectRatio = originalWidth / originalHeight;\n        const width = canvasWidth;\n        const height = width / aspectRatio;\n        context.drawImage(imgToResize, xOffset, yOffset, width * scale, height * scale);\n    }\n}\nfunction handleMouseDown(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    mouseStartX = parseInt(e.clientX - canvasOffsetX);\n    mouseStartY = parseInt(e.clientY - canvasOffsetY);\n    isDragging = true;\n}\nfunction handleMouseUp(e) {\n    if (!isDragging) return;\n    e.preventDefault();\n    e.stopPropagation();\n    isDragging = false;\n}\nfunction handleMouseOut(e) {\n    if (!isDragging) return;\n    e.preventDefault();\n    e.stopPropagation();\n    isDragging = false;\n}\nfunction handleMouseMove(e) {\n    if (!isDragging) return;\n    e.preventDefault();\n    e.stopPropagation();\n    let mouseX = parseInt(e.clientX - canvasOffsetX);\n    let mouseY = parseInt(e.clientY - canvasOffsetY);\n    const dx = mouseX - mouseStartX;\n    const dy = mouseY - mouseStartY;\n    xOffset += dx;\n    yOffset += dy;\n    renderCanvas();\n    mouseStartX = mouseX;\n    mouseStartY = mouseY;\n}\nfunction handleScroll(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.deltaY > 0) scale += 0.01;\n    else scale -= 0.01;\n    renderCanvas();\n}\ndocument.addEventListener(\"keydown\", function(e) {\n    switch(e.key){\n        case \"ArrowLeft\":\n            xOffset -= 3;\n            break;\n        case \"ArrowRight\":\n            xOffset += 3;\n            break;\n        case \"ArrowUp\":\n            yOffset -= 3;\n            break;\n        case \"ArrowDown\":\n            yOffset += 3;\n            break;\n        case \"=\":\n            scale += 0.01;\n            break;\n        case \"-\":\n            scale -= 0.01;\n            break;\n    }\n    renderCanvas();\n});\n\n//# sourceMappingURL=index.8235b389.js.map\n","const fileInput = document.querySelector(\"#upload\");\nconst colorPicker = document.querySelector(\"#color-picker\");\nconst widthInput = document.querySelector(\"#width-input\");\nconst heightInput = document.querySelector(\"#height-input\");\nconst bgImagePicker = document.querySelector(\"#imagebg-picker\");\nconst exportButton = document.querySelector(\"#export-button\");\nconst canvas = document.querySelector(\"#canvas\");\nconst context = canvas.getContext(\"2d\");\n\nlet imgToResize = null;\nlet canvasWidth = 896;\nlet canvasHeight = 506;\nlet backgroundColor = 'black';\nlet scale = 1.00;\nlet xOffset = 0;\nlet yOffset = 0;\nlet isDragging = false;\nlet mouseStartX, mouseStartY;\nlet canvasOffsetX, canvasOffsetY;\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    calcOffsetOfCanvas();\n    window.onscroll = function (e) { calcOffsetOfCanvas(); }\n    window.onresize = function (e) { calcOffsetOfCanvas(); }\n    canvas.onresize = function (e) { calcOffsetOfCanvas(); }\n\n    renderCanvas();\n    canvas.onmousedown = handleMouseDown;\n    canvas.onmousemove = handleMouseMove;\n    canvas.onmouseup = handleMouseUp;\n    canvas.onmouseout = handleMouseOut;\n    canvas.onmousewheel = handleScroll;\n});\n\ncolorPicker.addEventListener(\"change\", async (e) => {\n    backgroundColor = e.target.value;\n    renderCanvas();\n});\n\nbgImagePicker.addEventListener(\"change\", async (e) => {\n    renderCanvas();\n});\n\n\nheightInput.addEventListener(\"change\", async (e) => {\n    canvasHeight = e.target.value;\n    renderCanvas();\n});\n\nwidthInput.addEventListener(\"change\", async (e) => {\n    canvasWidth = e.target.value;\n    renderCanvas();\n});\n\nfunction calcOffsetOfCanvas() {\n    const canvasBounds = canvas.getBoundingClientRect();\n    canvasOffsetX = canvasBounds.left;\n    canvasOffsetY = canvasBounds.top;\n}\n\nfunction downloadImage() {\n    console.log('download image')\n    let canvasImage = canvas.toDataURL('image/jpeg');\n\n    let xhr = new XMLHttpRequest();\n    xhr.responseType = 'blob';\n    xhr.onload = function () {\n        let a = document.createElement('a');\n        a.href = window.URL.createObjectURL(xhr.response);\n        a.download = 'ImageResizerDownload.jpg';\n        a.style.display = 'none';\n        document.body.appendChild(a);\n        a.click();\n        a.remove();\n    };\n    xhr.open('GET', canvasImage); \n    xhr.send();\n}\n\nfileInput.addEventListener(\"change\", async (e) => {\n    const [file] = fileInput.files;\n    imgToResize = document.querySelector(\"#imgToResize\");\n    imgToResize.src = await fileToDataUri(file);\n\n    imgToResize.addEventListener(\"load\", () => {\n        renderCanvas();\n    });\n\n    return false;\n});\n\nfunction fileToDataUri(field) {\n    return new Promise((resolve) => {\n        const reader = new FileReader();\n\n        reader.addEventListener(\"load\", () => {\n            resolve(reader.result);\n        });\n\n        reader.readAsDataURL(field);\n    });\n}\n\nfunction renderCanvas() {\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n\n    context.fillStyle = backgroundColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n\n    if (imgToResize) {\n        if (bgImagePicker.checked) {\n            //apply bg blur\n            let blurImage = new Image();\n            blurImage.src = imgToResize.src;\n            context.filter = 'blur(50px)';\n\n\n            context.drawImage(\n                blurImage,\n                -80,\n                -80,\n                canvas.width + 160,\n                canvas.height + 160\n            );\n        }\n\n        context.filter = 'blur(0px)';\n\n        const originalWidth = imgToResize.width;\n        const originalHeight = imgToResize.height;\n\n        const aspectRatio = originalWidth / originalHeight;\n        const width = canvasWidth;\n        const height = width / aspectRatio;\n\n        context.drawImage(\n            imgToResize,\n            xOffset,\n            yOffset,\n            width * scale,\n            height * scale\n        );\n    }\n}\n\n\nfunction handleMouseDown(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    mouseStartX = parseInt(e.clientX - canvasOffsetX);\n    mouseStartY = parseInt(e.clientY - canvasOffsetY);\n\n    isDragging = true;\n}\n\nfunction handleMouseUp(e) {\n    if (!isDragging) { return; }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    isDragging = false;\n}\n\nfunction handleMouseOut(e) {\n    if (!isDragging) { return; }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    isDragging = false;\n}\n\nfunction handleMouseMove(e) {\n    if (!isDragging) { return; }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    let mouseX = parseInt(e.clientX - canvasOffsetX);\n    let mouseY = parseInt(e.clientY - canvasOffsetY);\n\n    const dx = mouseX - mouseStartX;\n    const dy = mouseY - mouseStartY;\n\n    xOffset += dx;\n    yOffset += dy;\n    \n    renderCanvas();\n\n    mouseStartX = mouseX;\n    mouseStartY = mouseY;\n}\n\nfunction handleScroll(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (e.deltaY > 0) {\n        scale += 0.01;\n    } else {\n        scale -= 0.01;\n    }\n    renderCanvas();\n}\n\ndocument.addEventListener(\"keydown\", function (e) {\n    switch (e.key) {\n        case \"ArrowLeft\":\n            xOffset -= 3;\n            break;\n        case \"ArrowRight\":\n            xOffset += 3;\n            break;\n        case \"ArrowUp\":\n            yOffset -= 3;\n            break;\n        case \"ArrowDown\":\n            yOffset += 3;\n            break;\n        case \"=\":\n            scale += 0.01;\n            break;\n        case \"-\":\n            scale -= 0.01;\n            break;\n    }\n    renderCanvas();\n})\n\n"],"names":["mouseStartX","mouseStartY","canvasOffsetX","canvasOffsetY","fileInput","document","querySelector","colorPicker","widthInput","heightInput","bgImagePicker","canvas","context","getContext","imgToResize","canvasWidth","canvasHeight","backgroundColor","scale","xOffset","yOffset","isDragging","calcOffsetOfCanvas","canvasBounds","getBoundingClientRect","left","top","renderCanvas","width","height","fillStyle","fillRect","checked","blurImage","Image","src","filter","drawImage","originalWidth","originalHeight","handleMouseDown","e","preventDefault","stopPropagation","parseInt","clientX","clientY","handleMouseUp","handleMouseOut","handleMouseMove","mouseX","mouseY","dy","handleScroll","deltaY","addEventListener","window","onscroll","onresize","onmousedown","onmousemove","onmouseup","onmouseout","onmousewheel","target","value","file","files","Promise","resolve","reader","FileReader","result","readAsDataURL","key"],"version":3,"file":"index.8235b389.js.map"}